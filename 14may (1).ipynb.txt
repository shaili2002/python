{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67d0177e-c030-4df6-91c6-15df5f71f440",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this function is in parent class\n",
      "this function is in child class\n"
     ]
    }
   ],
   "source": [
    "# types of inheritance \n",
    "# single inheritance\n",
    "# base class\n",
    "class Parent:\n",
    "    def func1(self):\n",
    "        print(\"this function is in parent class\")\n",
    "\n",
    "# derived class\n",
    "class Child(Parent):\n",
    "    def func2(self):\n",
    "        print(\"this function is in child class\")\n",
    "\n",
    "h1=Child()\n",
    "h1.func1()\n",
    "h1.func2()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c0e9edcc-0791-43d5-bf2e-6a416ff135b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this one parent class\n",
      "this is second parent class\n",
      "this is child class\n"
     ]
    }
   ],
   "source": [
    "# multiple inheritance\n",
    "class Mother:\n",
    "    def func1(self):\n",
    "        print(\"this one parent class\")\n",
    "\n",
    "class Father(Mother):\n",
    "    def func2(self):\n",
    "        print(\"this is second parent class\")\n",
    "\n",
    "class Child(Father):\n",
    "    def func3(self):\n",
    "        print(\"this is child class\")\n",
    "\n",
    "h1=Child()\n",
    "h1.func1()\n",
    "h1.func2()\n",
    "h1.func3()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d9e215c3-a358-46cd-a40e-8dff10d06c98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grandfather name: Lal mani\n",
      "Father name: Rampal\n",
      "Son name: Prince\n"
     ]
    }
   ],
   "source": [
    "# multilevel inheritance\n",
    "class Grandfather:\n",
    "\tdef __init__(self, grandfathername):\n",
    "\t\tself.grandfathername=grandfathername\n",
    "\n",
    "class Father(Grandfather):\n",
    "\tdef __init__(self, fathername, grandfathername):\n",
    "\t\tself.fathername=fathername\n",
    "\t\tGrandfather.__init__(self, grandfathername)\n",
    "\n",
    "class Son(Father):\n",
    "\tdef __init__(self, sonname, fathername, grandfathername):\n",
    "\t\tself.sonname=sonname\n",
    "\t\tFather.__init__(self, fathername, grandfathername)\n",
    "\n",
    "\tdef info(self):\n",
    "\t\tprint('Grandfather name:',self.grandfathername)\n",
    "\t\tprint(\"Father name:\",self.fathername)\n",
    "\t\tprint(\"Son name:\",self.sonname)\n",
    "\n",
    "s1=Son('Prince','Rampal','Lal mani')\n",
    "s1.info() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "270294f8-1c07-4444-b889-617b3f8af394",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "one parent class\n",
      "one child class\n",
      "one parent class\n",
      "second child class\n",
      "one parent class\n",
      "third child class\n"
     ]
    }
   ],
   "source": [
    "# hierarchical inheritance\n",
    "class Parent:\n",
    "    def func1(self):\n",
    "        print(\"one parent class\")\n",
    "\n",
    "class Child1(Parent):\n",
    "    def func2(self):\n",
    "        print(\"one child class\")\n",
    "\n",
    "class Child2(Parent):\n",
    "    def func3(self):\n",
    "        print(\"second child class\")\n",
    "\n",
    "class Child3(Parent):\n",
    "    def func4(self):\n",
    "        print(\"third child class\")\n",
    "\n",
    "h1=Child1()\n",
    "h2=Child2()\n",
    "h3=Child3() \n",
    "h1.func1()\n",
    "h1.func2()\n",
    "h2.func1()\n",
    "h2.func3() \n",
    "h3.func1()\n",
    "h3.func4()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "1416e518-1d11-4eb7-a631-b0063ca22094",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bus-Number: 2980\n",
      "Bus-Name: public bus\n"
     ]
    }
   ],
   "source": [
    "# modifiers\n",
    "# public\n",
    "class Bus:\n",
    "    # constructor\n",
    "    def __init__(self,bname,bnumber):\n",
    "        self.busname=bname\n",
    "        self.busnumber=bnumber\n",
    "    # member function\n",
    "    def showinfo(self):\n",
    "        print(\"Bus-Name:\",self.busname)\n",
    "\n",
    "# creation of object\n",
    "h1=Bus(\"public bus\",2980)\n",
    "print(\"Bus-Number:\",h1.busnumber)\n",
    "h1.showinfo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1a9b4ac3-e91c-44bc-9487-0b73093bcab2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Room-1: blue\n",
      "Room-2: green\n",
      "Room-3: yellow\n"
     ]
    }
   ],
   "source": [
    "# private\n",
    "class Room:\n",
    "    # private members\n",
    "    __room1=None\n",
    "    __room2=None\n",
    "    __room3=None\n",
    "    # constructor\n",
    "    def __init__(self,room1,room2,room3):\n",
    "        self.__room1=room1\n",
    "        self.__room2=room2\n",
    "        self.__room3=room3\n",
    "    # private memeber function\n",
    "    def __showinfo(self):\n",
    "        print(\"Room-1:\",self.__room1)\n",
    "        print(\"Room-2:\",self.__room2)\n",
    "        print(\"Room-3:\",self.__room3) \n",
    "\n",
    "    # public member function\n",
    "    def accessPrivateFunction(self):\n",
    "        self.__showinfo()\n",
    "\n",
    "# creating object\n",
    "h1=Room(\"blue\",\"green\",\"yellow\")\n",
    "# calling public member of the class\n",
    "h1.accessPrivateFunction()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3af0e5ea-051e-45bc-9123-154a3309349b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: shivangi\n",
      "Subject: BigData\n",
      "Roll-No: 111\n"
     ]
    }
   ],
   "source": [
    "# protected \n",
    "class Student1:\n",
    "    # protected member\n",
    "    _name=None\n",
    "    _sub=None\n",
    "    _roll=None\n",
    "    # constructor\n",
    "    def __init__(self,name,sub,roll):\n",
    "        self._name=name\n",
    "        self._sub=sub\n",
    "        self._roll=roll\n",
    "    # protected member function\n",
    "    def _showinfo(self):\n",
    "        print(\"Subject:\",self._sub)\n",
    "        print(\"Roll-No:\",self._roll)\n",
    "\n",
    "# derived class\n",
    "class deriv(Student1):\n",
    "    # constructor\n",
    "    def __init__(self,name,sub,roll):\n",
    "        Student1.__init__(self,name,sub,roll)\n",
    "    # public member function\n",
    "    def showName(self):\n",
    "        print(\"Name:\",self._name)\n",
    "        self._showinfo()\n",
    "\n",
    "# create object\n",
    "h1=deriv(\"shivangi\",\"BigData\",\"111\")\n",
    "# calling public member functions of the class\n",
    "h1.showName()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1a75aaca-60a2-4658-b7d4-224a489fd56c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "class Counter:\n",
    "    def __init__(self):\n",
    "        self.count=0 # initialize count to 0\n",
    "    def increment(self):\n",
    "        self.count+=1 # increase count by 1\n",
    "        \n",
    "# creating an object of the counter class\n",
    "counter=Counter()\n",
    "# Incrementing the count\n",
    "counter.increment()\n",
    "print(counter.count)  \n",
    "# Incrementing again\n",
    "counter.increment()\n",
    "print(counter.count) \n",
    "for i in range(1):\n",
    "    counter.increment()\n",
    "print(counter.count)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
